export default async function handler(req, res) {
    // --- CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ---
    res.setHeader("Access-Control-Allow-Origin", '*');
    res.setHeader("Access-Control-Allow-Methods", 'POST, GET, OPTIONS');
    res.setHeader("Access-Control-Allow-Headers", 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω',
            allowed: ['POST']
        });
    }
    
    try {
        const { question } = req.body;
        
        if (!question || question.trim().length === 0) {
            return res.status(400).json({ 
                error: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å'
            });
        }
        
        if (question.length > 1000) {
            return res.status(400).json({
                error: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
                message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤'
            });
        }
        
        console.log('–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å:', question.substring(0, 100));
        
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const HF_API_KEY = process.env.HUGGINGFACE_TOKEN;
        
        if (HF_API_KEY) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
            try {
                const hfResponse = await fetch(
                    'https://api-inference.huggingface.co/models/DeepPavlov/rubert-base-cased-conversational',
                    {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${HF_API_KEY}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            inputs: question,
                            parameters: {
                                max_length: 300,
                                temperature: 0.7,
                                do_sample: true,
                                return_full_text: false
                            }
                        })
                    }
                );
                
                if (hfResponse.ok) {
                    const hfData = await hfResponse.json();
                    if (hfData && hfData[0] && hfData[0].generated_text) {
                        console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Hugging Face');
                        return res.status(200).json({ 
                            answer: hfData[0].generated_text,
                            question: question,
                            timestamp: new Date().toISOString(),
                            provider: 'huggingface',
                            responseId: Math.random().toString(36).substring(2, 9)
                        });
                    }
                } else {
                    console.log('Hugging Face API error:', hfResponse.status);
                }
            } catch (hfError) {
                console.log('Hugging Face –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', hfError.message);
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            try {
                const hfResponse2 = await fetch(
                    'https://api-inference.huggingface.co/models/sberbank-ai/rugpt3large_based_on_gpt2',
                    {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${HF_API_KEY}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            inputs: question,
                            parameters: {
                                max_length: 200,
                                temperature: 0.7,
                                do_sample: true,
                                return_full_text: false
                            }
                        })
                    }
                );
                
                if (hfResponse2.ok) {
                    const hfData = await hfResponse2.json();
                    if (hfData && hfData[0] && hfData[0].generated_text) {
                        console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏');
                        return res.status(200).json({ 
                            answer: hfData[0].generated_text,
                            question: question,
                            timestamp: new Date().toISOString(),
                            provider: 'huggingface_rugpt',
                            responseId: Math.random().toString(36).substring(2, 9)
                        });
                    }
                }
            } catch (hfError2) {
                console.log('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:', hfError2.message);
            }
        }
        
        // –£–º–Ω—ã–π –¥–µ–º–æ-—Ä–µ–∂–∏–º –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        const smartAnswer = generateSmartAnswer(question);
        
        return res.status(200).json({ 
            answer: smartAnswer,
            question: question,
            timestamp: new Date().toISOString(),
            provider: HF_API_KEY ? 'smart_demo_fallback' : 'smart_demo',
            responseId: Math.random().toString(36).substring(2, 9)
        });
        
    } catch (error) {
        console.error('API Error:', error);
        return res.status(500).json({ 
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ'
        });
    }
}

// –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
function generateSmartAnswer(question) {
    const lowerQuestion = question.toLowerCase();
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if (/(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤|–¥–æ–±—Ä|hello|hi)/i.test(question)) {
        const greetings = [
            "–ü—Ä–∏–≤–µ—Ç! üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –û—á–µ–Ω—å —Ä–∞–¥ –Ω–∞—à–µ–º—É –æ–±—â–µ–Ω–∏—é. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üåü –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –ø–æ–≥–æ–¥–µ
    if (/(–ø–æ–≥–æ–¥|weather)/i.test(question)) {
        const cities = ['—É—Ñ–µ', '–º–æ—Å–∫–≤', '–ø–∏—Ç–µ—Ä', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–∫–∞–∑–∞–Ω', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'];
        const foundCity = cities.find(city => lowerQuestion.includes(city));
        const city = foundCity ? 
            (foundCity === '—É—Ñ–µ' ? '–£—Ñ–µ' : 
             foundCity === '–º–æ—Å–∫–≤' ? '–ú–æ—Å–∫–≤–µ' :
             foundCity === '–ø–∏—Ç–µ—Ä' || foundCity === '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥' ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ' :
             foundCity === '–∫–∞–∑–∞–Ω' ? '–ö–∞–∑–∞–Ω–∏' : '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ') : '–≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ';
        
        const weatherOptions = [
            `–°–µ–≥–æ–¥–Ω—è –≤ ${city} –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞! ‚òÄÔ∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ–∫–æ–ª–æ +20¬∞C, –ª–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫.`,
            `–í ${city} —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ +15...+18¬∞C.`,
            `–ü–æ–≥–æ–¥–∞ –≤ ${city}: –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, +10...+12¬∞C, –≤–æ–∑–º–æ–∂–Ω—ã –æ—Å–∞–¥–∫–∏. ‚òî`
        ];
        return weatherOptions[Math.floor(Math.random() * weatherOptions.length)];
    }
    
    // –í–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏
    if (/(–≤—Ä–µ–º|time|—á–∞—Å)/i.test(question)) {
        const now = new Date();
        const timeString = now.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
        return `–°–µ–π—á–∞—Å ${timeString}. ‚è∞ –í—Ä–µ–º—è –Ω–µ –∂–¥–µ—Ç - –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –≤–∞—à –≤–æ–ø—Ä–æ—Å!`;
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if (/(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ —Ç—ã)/i.test(question)) {
        return '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! üòä –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏. –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?';
    }
    
    if (/(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä)/i.test(question)) {
        return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!';
    }
    
    if (/(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω)/i.test(question)) {
        return '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º —Å–Ω–æ–≤–∞!';
    }
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const contextualAnswers = [
        `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ —Ç–µ–º–µ "${question}" —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.`,
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! "${question}" - —ç—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.`,
        `–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ "${question}". –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è —Ç–µ–º–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≥–ª—É–±–æ–∫–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.`,
        `–ü–æ –≤–æ–ø—Ä–æ—Å—É "${question}" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –∑—Ä–µ–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏–∑—É—á–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.`,
        `–í–∞—à –≤–æ–ø—Ä–æ—Å "${question}" –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.`
    ];
    
    return contextualAnswers[Math.floor(Math.random() * contextualAnswers.length)];
}
