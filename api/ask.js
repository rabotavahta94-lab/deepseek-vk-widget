import fetch from 'node-fetch';

export default async function handler(req, res) {
    // --- CORS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è ---
    res.setHeader("Access-Control-Allow-Origin", '*');
    res.setHeader("Access-Control-Allow-Methods", 'POST, GET, OPTIONS');
    res.setHeader("Access-Control-Allow-Headers", 'Content-Type, Authorization');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ 
            error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω',
            allowed: ['POST']
        });
    }
    
    try {
        const { question, community, jobs, history } = req.body;
        
        if (!question || question.trim().length === 0) {
            return res.status(400).json({ 
                error: '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å'
            });
        }
        
        console.log('–í–æ–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:', question.substring(0, 100));
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–ª–æ–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        const communityResponse = handleCommunityRequest(question, community, jobs);
        if (communityResponse) {
            return res.status(200).json(communityResponse);
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        const deepSeekResponse = await askDeepSeek(question, community, jobs, history);
        
        return res.status(200).json({ 
            answer: deepSeekResponse.answer,
            type: deepSeekResponse.type || 'text',
            question: question,
            timestamp: new Date().toISOString(),
            provider: 'deepseek'
        });
        
    } catch (error) {
        console.error('API Error:', error);
        
        // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const { question, community, jobs } = req.body;
        const fallbackResponse = generateCommunityResponse(question, community, jobs);
        
        return res.status(200).json({ 
            answer: fallbackResponse.answer,
            type: fallbackResponse.type,
            question: question,
            timestamp: new Date().toISOString(),
            provider: 'fallback'
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek API
async function askDeepSeek(question, community, jobs, history = []) {
    const apiKey = process.env.DEEPSEEK_API_KEY;
    
    if (!apiKey) {
        throw new Error('DEEPSEEK_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
    const systemPrompt = `–¢—ã - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ "–£—Ñ–∞ –†–∞–±–æ—Ç–∞ –í–∞—Ö—Ç–∞ –ë–∞—à–∫–∏—Ä–∏—è". 
–°–æ–æ–±—â–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–∞—Ö—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º —Å –Ω—É–ª—è.

–û –°–û–û–ë–©–ï–°–¢–í–ï:
- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤–∞—Ö—Ç–æ–≤—ã–º –º–µ—Ç–æ–¥–æ–º
- –û–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –∑–∞ 7 –¥–Ω–µ–π
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ –¢–ö –†–§
- –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 120 000 –¥–æ 180 000 —Ä—É–±–ª–µ–π
- –†–∞–±–æ—Ç–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏

–£–ß–ï–ë–ù–´–ï –¶–ï–ù–¢–†–´:
- –≥. –ú—ã—Ç–∏—â–∏ (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)
- –≥. –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å) 
- –≥. –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫ (–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)

–£–°–õ–û–í–ò–Ø –†–ê–ë–û–¢–´:
- –í–∞—Ö—Ç–∞ 60/30 –∏–ª–∏ 80/30 —Å–º–µ–Ω
- –ì—Ä–∞—Ñ–∏–∫ 6/1 –∏–ª–∏ 13/1
- –†–∞–±–æ—á–∏–π –¥–µ–Ω—å 10 —á–∞—Å–æ–≤
- –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –∏–ª–∏ –≥–æ—Ä–æ–¥–∫–∞—Ö –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞
- 3-—Ö —Ä–∞–∑–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
- –ü—Ä–æ–µ–∑–¥ –¥–æ–º-–æ–±—ä–µ–∫—Ç-–¥–æ–º –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏
- –°–ø–µ—Ü–æ–¥–µ–∂–¥–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –°–ò–ó—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–ê–ù–î–ò–î–ê–¢–ê–ú:
- –•–æ—Ä–æ—à–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π  
- –•–æ—Ä–æ—à–µ–µ –∑—Ä–µ–Ω–∏–µ
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—Ö—Ç–æ–π

–î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –¢–†–£–î–û–£–°–¢–†–û–ô–°–¢–í–ê:
1. –ü–∞—Å–ø–æ—Ä—Ç (—Ä–∞–∑–≤–æ—Ä–æ—Ç —Å —Ñ–æ—Ç–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
2. –°–ù–ò–õ–°
3. –ò–ù–ù
4. –í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç/–ø—Ä–∏–ø–∏—Å–Ω–æ–µ
5. –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ì–æ—Å—É—Å–ª—É–≥
6. –°–ø—Ä–∞–≤–∫–∞ –æ –Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—É–¥–∏–º–æ—Å—Ç–∏

–í–ê–ö–ê–ù–°–ò–ò –° –û–ë–£–ß–ï–ù–ò–ï–ú (–æ—Ç 120 000 ‚ÇΩ):
- –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–µ—Å–æ–≤ (–æ—Ç 19 –ª–µ—Ç)
- –ò–∑–æ–ª–∏—Ä–æ–≤—â–∏–∫ —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–∞ (–æ—Ç 19 –ª–µ—Ç) 
- –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–ª—å–ø–∏–Ω–∏—Å—Ç (–æ—Ç 21 –≥–æ–¥–∞)

–í–ê–ö–ê–ù–°–ò–ò –î–õ–Ø –û–ü–´–¢–ù–´–•:
- –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–æ–≤ (–æ—Ç 180 000 ‚ÇΩ)
- –ú–æ–Ω—Ç–∞–∂–Ω–∏–∫ –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π (182 000-210 000 ‚ÇΩ)
- –°–≤–∞—Ä—â–∏–∫ —Å –ù–ê–ö–° (280 000-336 000 ‚ÇΩ)
- –≠–ª–µ–∫—Ç—Ä–æ–≥–∞–∑–æ—Å–≤–∞—Ä—â–∏–∫ (161 200-195 000 ‚ÇΩ)

–ö–û–ù–¢–ê–ö–¢–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –¢–µ–ª–µ—Ñ–æ–Ω: ${community.contactPhone} (${community.contactName})
- –ü–æ —Ä–µ–∫–ª–∞–º–µ: —Ç–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω (WhatsApp)

–†–ï–ö–õ–ê–ú–ê –í –ì–†–£–ü–ü–ï:
- 1 –ø–æ—Å—Ç: 200 ‚ÇΩ
- –û—Ç 5 –ø–æ—Å—Ç–æ–≤: 150 ‚ÇΩ –∑–∞ –ø–æ—Å—Ç
- –í –¥–µ–Ω—å –Ω–µ –±–æ–ª–µ–µ 3 —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

–ü–†–ê–í–ò–õ–ê –°–û–û–ë–©–ï–°–¢–í–ê:
- –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
- –ë–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤
- –ß–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –ó–∞–ø—Ä–µ—â–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è

–¢–í–û–ò –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
1. –ü–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–∫–∞–Ω—Å–∏–∏
2. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —É—Å–ª–æ–≤–∏—è–º —Ä–∞–±–æ—Ç—ã –∏ –æ–±—É—á–µ–Ω–∏—è
3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –¥–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
4. –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—Ö—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ
5. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–µ–∫–ª–∞–º–µ –≤ –≥—Ä—É–ø–ø–µ

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${community.contactPhone}
- –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ–∑–≤–æ–Ω–∏—Ç—å
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è —Å –Ω—É–ª—è
- –£–ø–æ–º–∏–Ω–∞–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π - –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
- –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤`;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    const messages = [
        { role: 'system', content: systemPrompt },
        ...history.map(msg => ({
            role: msg.role === 'user' ? 'user' : 'assistant',
            content: msg.content
        })),
        { role: 'user', content: question }
    ];

    const response = await fetch('https://api.deepseek.com/chat/completions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify({
            model: 'deepseek-chat',
            messages: messages,
            temperature: 0.7,
            max_tokens: 2000,
            stream: false
        })
    });

    if (!response.ok) {
        const errorText = await response.text();
        console.error('DeepSeek API error:', response.status, errorText);
        throw new Error(`DeepSeek API error: ${response.status}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0]) {
        throw new Error('Invalid response from DeepSeek API');
    }

    return {
        answer: data.choices[0].message.content,
        type: 'text'
    };
}

// –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
function handleCommunityRequest(question, community, jobs) {
    const lowerQuestion = question.toLowerCase();
    
    // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    if (/(–≤–∞–∫–∞–Ω—Å|—Ä–∞–±–æ—Ç–∞|—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤)/i.test(question)) {
        const foundJobs = searchJobs(question, jobs);
        return {
            answer: foundJobs,
            type: 'jobs',
            question: question
        };
    }
    
    return null;
}

// –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function searchJobs(question, jobs) {
    const lowerQuestion = question.toLowerCase();
    let foundJobs = [];
    
    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (/(–æ–±—É—á–µ–Ω|—Å –Ω—É–ª—è|–Ω–∞—É—á–∏)/i.test(question)) {
        foundJobs = [...(jobs.–æ–±—É—á–µ–Ω–∏–µ || [])];
    } else if (/(–æ–ø—ã—Ç|—Å—Ç–∞–∂|—Ä–∞–∑—Ä—è–¥)/i.test(question)) {
        foundJobs = [...(jobs.–æ–ø—ã—Ç–Ω—ã–µ || [])];
    } else {
        // –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        foundJobs = [...(jobs.–æ–±—É—á–µ–Ω–∏–µ || []), ...(jobs.–æ–ø—ã—Ç–Ω—ã–µ || [])];
    }
    
    return foundJobs.slice(0, 6);
}

// Fallback –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ API
function generateCommunityResponse(question, community, jobs) {
    const lowerQuestion = question.toLowerCase();
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    return {
        answer: `üíº <strong>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ö—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É —Å –æ–±—É—á–µ–Ω–∏–µ–º!</strong>\n\n` +
               `üéì <strong>–û–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è –∑–∞ 7 –¥–Ω–µ–π</strong>\n` +
               `üí∞ <strong>–ó–∞—Ä–ø–ª–∞—Ç–∞: 120 000 - 180 000 —Ä—É–±–ª–µ–π</strong>\n\n` +
               `üìû <strong>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</strong> ${community.contactPhone} (${community.contactName})\n\n` +
               `üìç <strong>–£—á–µ–±–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã:</strong> –ú—ã—Ç–∏—â–∏, –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫\n\n` +
               `üí° <strong>–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é - –∑–≤–æ–Ω–∏—Ç–µ! –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.</strong>`,
        type: 'text'
    };
}
